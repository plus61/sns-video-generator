📋 PRESIDENT → BOSS: Railway本番環境テスト実施指令

【概要】
Railway環境のデプロイと設定が完了。本番環境での包括的テストを実施し、全機能の動作確認を行う。

【テスト戦略】
1. 段階的検証アプローチ
   - Phase 1: 基本疎通確認（ヘルスチェック、環境変数）
   - Phase 2: コア機能テスト（認証、DB接続、API応答）
   - Phase 3: 統合テスト（E2E、負荷テスト）

2. 並列実行による効率化
   - Worker1: インフラ・環境検証
   - Worker2: 機能・API テスト
   - Worker3: 統合・パフォーマンステスト

【具体的タスク配分】

## Worker1（インフラ担当）
- Railway環境のヘルスチェックエンドポイント確認
- 環境変数の正常読み込み検証
- Dockerコンテナのリソース使用状況監視
- ログ収集とエラー監視体制の構築
- SSL/TLS証明書の有効性確認

## Worker2（機能担当）
- 認証フロー（NextAuth.js）の動作確認
- Supabase接続とCRUD操作テスト
- OpenAI API統合の動作検証
- ファイルアップロード機能のテスト
- エラーハンドリングとフォールバック確認

## Worker3（統合担当）
- E2Eシナリオテスト実行
- 負荷テスト（同時接続数、レスポンスタイム）
- セキュリティヘッダーとCSP確認
- モバイル/デスクトップ互換性テスト
- パフォーマンスメトリクス収集

【実行手順】
1. 各Workerに詳細タスクを割り当て
2. テスト実行と結果収集を並列処理
3. 問題発見時は即座に報告・対応
4. 全テスト完了後、総合レポート作成

【成功基準】
- 全エンドポイントの正常応答（200/201）
- 平均レスポンスタイム < 500ms
- エラー率 < 0.1%
- 全環境変数の正常読み込み
- セキュリティ脆弱性ゼロ

【報告形式】
- リアルタイム進捗更新（5分毎）
- 問題発見時の即時アラート
- 最終レポートにメトリクスとグラフ含む

即座に実行開始し、並列処理で効率的にテストを完了させること。
問題があれば、根本原因の特定と解決策の提示を含めて報告すること。

実行時刻: $(date '+%Y-%m-%d %H:%M:%S')
優先度: 最高